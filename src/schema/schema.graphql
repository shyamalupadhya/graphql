type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
    hobbies: [Hobby!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
}

type Comment {
    id: ID!
    text: String!
    post: Post!
    author: User!
}

type Hobby {
    id: ID!
    name: String!
    users: [User!]!
}

type Query {
    user (name: String!): User!
    post (id: ID!): Post!
    comment (id: ID!): Comment!
    hobby (name: String): Hobby!
    users: [User!]!
    posts: [Post!]!
    comments: [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput): User!
    updateUser(id: ID!, data: CreateUserUpdate): User!
    deleteUser(id: ID!): User!

    createPost(data: CreatePostInput): Post!
    updatePost(id: ID!, data: CreatePostUpdate): Post!
    deletePost(id: ID!): Post!

    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
}

type Subscription {
  post: PostSubscriptionPayload
  comment(postId: ID!): CommentSubscriptionPayload
}

type PostSubscriptionPayload {
    mutation: MutationType
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType
    data: Comment!

}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input CreateUserUpdate {
    name: String
    email: String
    age: Int
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: String!
}

input CreatePostUpdate {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: String!
    author: String!
}
